#BlueJ class context
comment0.target=Movie
comment0.text=\r\n\ Represents\ an\ object\ of\ type\ Movie.\r\n\ A\ Movie\ object\ has\ a\ title,\ some\ Actors,\ and\ results\ for\ the\ twelve\ Bechdel\ testResultss.\r\n\r\n\ @author\ (Stella\ K.,\ Joyce\ C.,\ Candice\ X.,\ Malahim\ T.)\r\n\ @version\ (28\ Nov\ 2021,\ 4\:35pm;\ 04/29/2022)\r\n
comment1.params=title
comment1.target=Movie(java.lang.String)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Movie.\r\n\ Initializes\ instance\ variables\ for\ this\ movie.\r\n\ \r\n\ @param\ title\ of\ this\ movie\r\n
comment10.params=actorsFile
comment10.target=void\ addAllActors(java.lang.String)
comment10.text=\r\n\ Reads\ the\ input\ file\ ("nextBechdel_castGender.txt"),\ and\ adds\ all\ its\ Actors\ \r\n\ to\ this\ movie.\ \r\n\ \r\n\ Each\ line\ in\ the\ movie\ has\ the\ following\ formatting\:\ \r\n\ Input\ String\ has\ the\ following\ formatting\:\ "MOVIE\ TITLE","ACTOR","CHARACTER_NAME",\r\n\ "TYPE","BILLING","GENDER"\ \r\n\ \r\n\ Example\ of\ input\:\ "Trolls","Ricky\ Dillon","Aspen\ Heitz","Supporting","18","Male"\r\n\ \r\n\ @param\ actorsFile\ the\ file\ containing\ information\ on\ each\ actor\ who\ acted\ in\ the\ movie.\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ movie\ for\ easier\ testing\r\n\ \r\n\ @return\ a\ reasonable\ string\ representation\ of\ this\ movie\:\ includes\ the\ title,\ \r\n\ the\ feminist\ score,\ and\ the\ number\ of\ actors\ who\ played\ in\ it.\r\n
comment12.params=
comment12.target=double\ feministScore()
comment12.text=\r\n\ Determines\ the\ feminist\ score\ of\ a\ Movie\ based\ on\ the\ combination\ \r\n\ of\ the\ Rees-Davies\ test,\ Villareal\ test,the\ Koeze-Dottle\ test,\ the\ Ko\ test,\r\n\ the\ Peirce\ test,\ the\ Landau\ test,\ and\ the\ Feldman\ test.\r\n\ \r\n\ The\ Movie\ will\ have\ a\ feminist\ score\ of\ ranging\ between\ 0\ to\ 6.5\ depending\r\n\ on\ how\ many\ of\ the\ chosen\ alternative\ tests\ it\ passed.\r\n\ \r\n\ @return\ feminist\ score\ of\ this\ movie\ based\ on\ 7\ chosen\ alternative\ tests.\r\n
comment13.params=other
comment13.target=int\ compareTo(Movie)
comment13.text=\r\n\ Compares\ this\ Movie\ to\ the\ other\ Movie\ (parameter)\ based\r\n\ on\ their\ feminist\ scores\ that\ determines\ their\ priority.\ \r\n\ Uses\ the\ order\ in\ which\ the\ elements\ were\ added\ to\ break\ ties.\r\n\ \r\n\ @param\ other\ Movie\ to\ compare\ to\r\n\ \r\n\ @return\ int\ that\ determines\ if\ this\ Movie\ has\ a\ greater\ (positive\ \#)\r\n\ or\ less\ (negative\ \#)\ priority\ than\ the\ other\ Movie\r\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\r\n\ Main\ method\ for\ testResultsing.\r\n
comment2.params=
comment2.target=int\ getOrder()
comment2.text=\r\n\ Gets\ the\ order\ of\ this\ Movie\r\n\ \r\n\ @return\ int\ of\ the\ order\ of\ this\ Movie\ \r\n
comment3.params=
comment3.target=java.lang.String\ getTitle()
comment3.text=\r\n\ Gets\ the\ title\ of\ this\ Movie\r\n\ \r\n\ @return\ the\ title\ of\ this\ Movie\r\n
comment4.params=
comment4.target=java.util.Hashtable\ getAllActors()
comment4.text=\r\n\ Gets\ this\ movie's\ actors\ (key)\ along\ with\ their\ \r\n\ roles\ (values)\ in\ a\ Hashtable\r\n\ \r\n\ @return\ Hashtable\ with\ all\ the\ actors\ who\ played\ in\ this\ movie\r\n
comment5.params=
comment5.target=java.util.LinkedList\ getActors()
comment5.text=\r\n\ Gets\ all\ the\ names\ of\ the\ actors\ in\ this\ movie\ \r\n\ in\ a\ Linked\ List.\r\n\ \r\n\ @return\ LinkedList\ with\ the\ names\ of\ all\ the\ actors\ \r\n\ who\ played\ in\ this\ movie\r\n
comment6.params=
comment6.target=java.util.Vector\ getAllTestResults()
comment6.text=\r\n\ Returns\ a\ Vector\ with\ all\ the\ Bechdel\ test\r\n\ results\ for\ this\ movie.\ A\ testResults\ result\ can\ be\ \r\n\ "1"\ or\ "0"\ indicating\ whether\ this\ move\ passed\ \r\n\ or\ not\ the\ corresponding\ testResults.\r\n\ \r\n\ @return\ Vector\ with\ the\ Bechdel\ test\ results\ for\ this\ movie\r\n
comment7.params=results
comment7.target=void\ setTestResults(java.lang.String)
comment7.text=\r\n\ Populates\ the\ testResults\ vector\ with\ "0"\ and\ "1"s,\ \r\n\ each\ representing\ the\ result\ of\ the\ coresponding\ test\ \r\n\ on\ this\ movie.\ This\ information\ will\ be\ read\ from\ the\ file\ \r\n\ "nextBechdel_allTests.csv".\r\n\ \r\n\ @param\ results\ \ string\ consisting\ of\ of\ 0's\ and\ 1's.\ Each\ \r\n\ one\ of\ these\ values\ denotes\ the\ result\ of\ the\ corresponding\ \r\n\ test\ on\ this\ movie\r\n
comment8.params=other
comment8.target=boolean\ equals(java.lang.Object)
comment8.text=\r\n\ Tests\ this\ movie\ object\ with\ the\ input\ one\ and\ determines\ whether\ they\ are\ equal.\r\n\ \r\n\ @param\ other\ movie\ to\ compare\ to\r\n\ \r\n\ @return\ true\ if\ both\ objects\ are\ movies\ and\ have\ the\ same\ title,\ \r\n\ false\ in\ any\ other\ case.\r\n
comment9.params=line
comment9.target=Actor\ addOneActor(java.lang.String)
comment9.text=\r\n\ Takes\ in\ a\ String,\ formatted\ as\ lines\ are\ in\ the\ input\ file\ \r\n\ ("nextBechdel_castGender.txt"),\ generates\ an\ Actor,\ and\ adds\ \r\n\ the\ object\ to\ the\ actors\ of\ this\ movie.\ \r\n\ \r\n\ Input\ String\ has\ the\ following\ formatting\:\ "MOVIE",\ "ACTOR","CHARACTER_NAME",\r\n\ "TYPE","BILLING","GENDER"\ \r\n\ \r\n\ Example\ of\ input\:\ "Ricky\ Dillon","Aspen\ Heitz","Supporting","18","Male"\r\n\ \r\n\ @param\ line\ of\ information\ about\ actor\ in\ this\ movie\r\n\ \r\n\ @return\ Actor\ from\ inputted\ information\r\n
numComments=15
