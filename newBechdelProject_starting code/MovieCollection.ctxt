#BlueJ class context
comment0.target=MovieCollection
comment0.text=\r\n\ Write\ a\ description\ of\ class\ MovieCollection\ here.\r\n\r\n\ @author\ Candice,\ Joyce,\ Malahim\r\n\ @version\ 05/02/2022\r\n
comment1.params=testsFileName\ castsFileName
comment1.target=MovieCollection(java.lang.String,\ java.lang.String)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ MovieCollection\r\n
comment10.params=
comment10.target=java.util.LinkedList\ findAllMoviesPassedTestPeirceOrLandau()
comment10.text=\r\n\ Returns\ a\ list\ of\ all\ Movies\ that\ passes\ the\ Peirce\ or\ Landau\ test.\r\n\ \r\n\ @return\ LinkedList\ of\ all\ the\ movies\ that\ passes\ the\ Peirce\ or\ Landau\ test.\r\n
comment11.params=
comment11.target=java.util.LinkedList\ findAllMoviesPassedTestWhiteNotReesDavies()
comment11.text=\r\n\ Returns\ a\ list\ of\ all\ Movies\ that\ passes\ the\ White\ test\ but\ not\ the\r\n\ Rees\ Davies\ test.\r\n\ \r\n\ @return\ LinkedList\ of\ all\ the\ movies\ that\ passes\ the\ White\ test\ but\ not\ the\r\n\ Rees\ Davies\ test.\r\n
comment12.params=
comment12.target=javafoundations.PriorityQueue\ prioritizeMovies()
comment12.text=\r\n\ Returns\ a\ PriorityQueue\ of\ movies\ in\ the\ provided\ data\ based\ on\ their\ \r\n\ feminist\ score.\ That\ is,\ if\ you\ enqueue\ all\ the\ movies,\ they\ will\ be\ \r\n\ dequeued\ in\ priority\ order\:\ from\ most\ feminist\ to\ least\ feminist.\ \r\n\ \r\n\ @return\ PriorityQueue\ of\ movies\ in\ the\ provided\ data\ based\ on\ their\ \r\n\ feminist\ score\r\n
comment13.params=args
comment13.target=void\ main\u200B(java.lang.String[])
comment13.text=\r\n\ Main\ method\ for\ testing\ purposes.\r\n
comment2.params=
comment2.target=java.util.LinkedList\ getMovies()
comment2.text=\r\n\ Returns\ all\ the\ movies\ in\ a\ LinkedList\r\n\ \r\n\ @return\ a\ LinkedList\ with\ all\ the\ movies,\ each\ complete\ with\ its\ title,\ \r\n\ actors\ and\ Bechdel\ test\ results.\r\n
comment3.params=
comment3.target=java.util.LinkedList\ getMovieTitles()
comment3.text=\r\n\ Returns\ the\ titles\ of\ all\ movies\ in\ the\ collection\r\n\ \r\n\ @return\ a\ LinkedList\ with\ the\ titles\ of\ all\ the\ movies\r\n
comment4.params=
comment4.target=java.util.LinkedList\ getActors()
comment4.text=\r\n\ Returns\ all\ the\ Actors\ in\ the\ collection\r\n\ \r\n\ @return\ a\ LinkedList\ with\ all\ the\ Actors,\ \r\n\ each\ complete\ with\ their\ name\ and\ gender.\r\n
comment5.params=
comment5.target=java.util.LinkedList\ getActorNames()
comment5.text=\r\n\ Returns\ the\ names\ of\ all\ actors\ in\ the\ collection\r\n\ \r\n\ @return\ a\ LinkedList\ with\ the\ names\ of\ all\ actors\r\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\r\n\ Returns\ a\ String\ representing\ this\ MovieCollection\r\n\ \r\n\ @return\ a\ String\ representation\ of\ this\ collection,\ including\ the\ number\ \r\n\ of\ movies\ and\ the\ movies\ themselves.\r\n
comment7.params=
comment7.target=void\ readMovies()
comment7.text=\r\n\ Reads\ the\ input\ file,\ and\ uses\ its\ first\ column\ (movie\ title)\ to\ \r\n\ create\ all\ movie\ objects.\ Adds\ the\ included\ information\ on\ the\ Bachdel\ \r\n\ test\ results\ to\ each\ movie.\ \r\n
comment8.params=
comment8.target=void\ readCasts()
comment8.text=\r\n\ Reads\ the\ casts\ for\ each\ movie,\ from\ input\ casts\ file;\ \r\n\ \r\n\ Assume\ lines\ in\ this\ file\ are\ formatted\ as\ followes\:\ "MOVIE","ACTOR","CHARACTER_NAME",\r\n\ "TYPE","BILLING","GENDER"\ \r\n\ \r\n\ For\ example\:\ "Trolls","Ricky\ Dillon","Aspen\ Heitz","Supporting","18","Male".\ \r\n\ \r\n\ Notes\:\ \r\n\ 1)\ each\ movie\ will\ appear\ in\ (potentially)\ many\ consecutive\ lines,\ one\ line\ per\ actor.\ \r\n\ 2)\ Each\ token\ (title,\ actor\ name,\ etc)\ appears\ in\ double\ quotes,\ which\ need\ to\ be\ \r\n\ \ \ \ removed\ as\ soon\ as\ the\ tokes\ are\ read.\ \r\n\ 3)\ If\ a\ movie\ does\ not\ have\ any\ test\ results,\ it\ is\ ignored\ and\ not\ included\ in\ the\ collection.\ \r\n\ \ \ \ (There\ is\ actually\ one\ such\ movie)\r\n
comment9.params=n
comment9.target=java.util.LinkedList\ findAllMoviesPassedTestNum(int)
comment9.text=\r\n\ Returns\ a\ list\ of\ all\ Movies\ that\ pass\ the\ n-th\ Bechdel\ test\r\n\ \r\n\ @param\ n\ -\ integer\ identifying\ the\ n-th\ test\ in\ the\ list\ of\ 12\ Bechdel\ \r\n\ alternatives,\ starting\ from\ zero\r\n\ \r\n\ @return\ a\ list\ of\ all\ Movies\ which\ have\ passed\ the\ n-th\ test\r\n
numComments=14
